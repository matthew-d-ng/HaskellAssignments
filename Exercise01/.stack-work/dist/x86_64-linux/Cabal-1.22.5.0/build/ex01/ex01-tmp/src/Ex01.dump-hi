
==================== FINAL INTERFACE ====================
2018-10-07 17:17:25.121924 UTC

interface main@main:Ex01 7103
  interface hash: 0626e1d1ccf7fd779c4a1965e59ac6a8
  ABI hash: 1150ed7595e7b0d539e50bac2958ea92
  export-list hash: 960bce9cb83a757424eeb4dd5144f6b9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bb68099cd65a840fc0e79e4d58ba3f65
  sig of: Nothing
  used TH splices: False
  where
exports:
  Ex01.define
  Ex01.eval
  Ex01.find
  Ex01.simp
  Ex01.simpAdd
  Ex01.simpDef
  Ex01.simpDvd
  Ex01.simpMul
  Ex01.simpSub
  Ex01.simpVar
  Ex01.Dict
  Ex01.EDict
  Ex01.Expr{Ex01.Add Ex01.Def Ex01.Dvd Ex01.Mul Ex01.Sub Ex01.Val Ex01.Var}
  Ex01.Id
module dependencies:
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
2f1b455721c5f7cccec9e6946ec669e2
  $fEqExpr :: GHC.Classes.Eq Ex01.Expr
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex01.Expr Ex01.$fEqExpr_$c== Ex01.$fEqExpr_$c/= -}
2f1b455721c5f7cccec9e6946ec669e2
  $fEqExpr_$c/= :: Ex01.Expr -> Ex01.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Ex01.Expr b :: Ex01.Expr ->
                 case Ex01.$fEqExpr_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fEqExpr_$c== :: Ex01.Expr -> Ex01.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr :: GHC.Show.Show Ex01.Expr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Ex01.Expr
                  Ex01.$fShowExpr_$cshowsPrec
                  Ex01.$fShowExpr_$cshow
                  Ex01.$fShowExpr_$cshowList -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr1 :: Ex01.Expr -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Ex01.Expr -> Ex01.$w$cshowsPrec 0 w) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr_$cshow :: Ex01.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Ex01.Expr ->
                 Ex01.$fShowExpr_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr_$cshowList :: [Ex01.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Ex01.Expr Ex01.$fShowExpr1) -}
2f1b455721c5f7cccec9e6946ec669e2
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Ex01.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Ex01.Expr ->
                 case w of ww { GHC.Types.I# ww1 -> Ex01.$w$cshowsPrec ww1 w1 }) -}
2f1b455721c5f7cccec9e6946ec669e2
  $w$cshowsPrec :: GHC.Prim.Int# -> Ex01.Expr -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
94cd79bca1a8ace8a97b28aabf010bda
  type Dict k d = [(k, d)]
3d9890f6a2e04266b39588d003ef6ab4
  type EDict = Ex01.Dict GHC.Base.String GHC.Types.Double
2f1b455721c5f7cccec9e6946ec669e2
  data Expr
    = Val GHC.Types.Double
    | Add Ex01.Expr Ex01.Expr
    | Mul Ex01.Expr Ex01.Expr
    | Sub Ex01.Expr Ex01.Expr
    | Dvd Ex01.Expr Ex01.Expr
    | Var Ex01.Id
    | Def Ex01.Id Ex01.Expr Ex01.Expr
c2cd8d510ab6c41160a76d027403fd79
  type Id = GHC.Base.String
319df949919156e653f97dd7e4a57b5b
  define :: Ex01.Dict k d -> k -> d -> Ex01.Dict k d
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ @ k @ d d1 :: Ex01.Dict k d s :: k v :: d ->
                 GHC.Types.: @ (k, d) (s, v) d1) -}
1d373e625788a358cfbccdba8c25b9b2
  eval :: Ex01.EDict -> Ex01.Expr -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (2, True, True)
                (\ d :: Ex01.EDict e :: Ex01.Expr -> Ex01.eval1) -}
f739320caed982ac5c86b31e56c67532
  eval1 :: GHC.Base.Maybe GHC.Types.Double
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Double Ex01.eval2) -}
7fb62e47e3143b6e772718aea16a55bf
  eval2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 1.0e-99) -}
36033051ba419cfc2b4f851059f99ce7
  find :: GHC.Classes.Eq k => Ex01.Dict k d -> k -> GHC.Base.Maybe d
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U> -}
2bda80596edf2460995aa1249df86a83
  simp :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ d :: Ex01.EDict ds :: Ex01.Expr ->
                 case ds of wild {
                   Ex01.Val ipv -> wild
                   Ex01.Add e1 e2 -> Ex01.simp1
                   Ex01.Mul e1 e2 -> Ex01.simp1
                   Ex01.Sub e1 e2 -> Ex01.simp1
                   Ex01.Dvd e1 e2 -> Ex01.simp1
                   Ex01.Var v -> Ex01.simp1
                   Ex01.Def v e1 e2 -> Ex01.simp1 }) -}
165f1c0910cb3558b3983e61282e1ba6
  simp1 :: Ex01.Expr
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Ex01.Val Ex01.eval2) -}
145cb7bf4ce6a0680e61b5680703fecc
  simpAdd :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>m1,
     Unfolding: InlineRule (3, True, True)
                (\ d :: Ex01.EDict e1 :: Ex01.Expr e2 :: Ex01.Expr ->
                 Ex01.simp1) -}
7022944d1bbbc680fb76bd0f516cced5
  simpDef ::
    Ex01.EDict -> Ex01.Id -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>m1,
     Unfolding: InlineRule (4, True, True)
                (\ d :: Ex01.EDict v :: Ex01.Id e1 :: Ex01.Expr e2 :: Ex01.Expr ->
                 Ex01.simp1) -}
375e2e91b360b278fd4b3e1f6202232a
  simpDvd :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>m1,
     Unfolding: InlineRule (3, True, True)
                (\ d :: Ex01.EDict e1 :: Ex01.Expr e2 :: Ex01.Expr ->
                 Ex01.simp1) -}
794ca0bae2204ced8b4e11b614485274
  simpMul :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>m1,
     Unfolding: InlineRule (3, True, True)
                (\ d :: Ex01.EDict e1 :: Ex01.Expr e2 :: Ex01.Expr ->
                 Ex01.simp1) -}
55650a684d2259d09943865932205139
  simpSub :: Ex01.EDict -> Ex01.Expr -> Ex01.Expr -> Ex01.Expr
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>m1,
     Unfolding: InlineRule (3, True, True)
                (\ d :: Ex01.EDict e1 :: Ex01.Expr e2 :: Ex01.Expr ->
                 Ex01.simp1) -}
a156b0bd803aad8ea06edcea71107497
  simpVar :: Ex01.EDict -> Ex01.Id -> Ex01.Expr
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m1,
     Unfolding: InlineRule (2, True, True)
                (\ d :: Ex01.EDict v :: Ex01.Id -> Ex01.simp1) -}
instance GHC.Classes.Eq [Ex01.Expr] = Ex01.$fEqExpr
instance GHC.Show.Show [Ex01.Expr] = Ex01.$fShowExpr
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

